colors = {
    line: #f0f1f3,
    primary: #1877ed,
    main: #fafafa,
    black: #3d4c63,
    success: #2faa32,
    info: #1a1a1a,
    warning: #f19528,
    gray: #fafafa,
    white: #fff,
    danger: #f75d5d,
    danger-light: #fbaeae,
    border: #dedede,
    actived: #f3f8fe,
    lightsuccess: #eaf6ea,
    lightwarning: #fef4e9,
    lightdanger: #fef6f6
};

.d-flex {
    display: flex;
}

.flex-d {
    flex-direction: column;
}

.flex-1 {
    flex: 1;
    overflow: hidden;
}

.text-center {
    text-align: center;
}

.between {
    justify-content: space-between;
}


.bra {
    border-radius: 5px;
}

for key, val in colors {
    .{key} {
        color: val;
    }

    .bg-{key} {
        background-color: val;
    }

    .r{key} {
        @extend .{key};
        background-color: val;
        color: colors['white'];
    }
}

for val in range(12px, 30px) {
    .fs-{val} {
        font-size: val;
    }
}

direction = {
    t: top,
    r: right,
    b: bottom,
    l: left
};
distance = {
    p: padding,
    m: margin,
    b: border
};

for i in 8 .. 20 {
    for j, item in distance {
        .{j}-{i} {
            {item}: i * 1px;
        }

        .{j}-0 {
            {item}: 0;
        }

        .{j}x-{i} {
            {item}: 0 i * 1px;
        }

        .{j}y-{i} {
            {item}: i * 1px 0;
        }

        for key, value in direction {
            .{j}{key}-{i} {
                {item}-{value}: i * 1px;
            }
        }
    }
}

@css {
    .calc{
       height:  calc(100vh - 60px);
     }
}
jc = {
    between: space-between,
    evenly: space-evenly,
    around: space-around,
    center: center,
    end: flex-end
};

.ai-center {
    align-items: center;
}

for key, val in jc {
    .{key} {
        justify-content: val;
    }
}

.iconfont {
    &.active {
        border: 1px solid colors['primary'];
        color: colors['primary'];
    }
}

$border {
    border: 1px solid colors['border'];
}

.border {
    @extend $border;
}

bor = {
    bt: border-top,
    br: border-right,
    bb: border-bottom,
    bl: border-left
};

for key, val in bor {
    .{key} {
        {val}: 1px solid colors['border'];
    }
}

.bs {
    box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);
}

#app {
    .el-scrollbar__wrap {
        overflow-x: hidden;
    }
}

.fw {
    font-weight: 900;
}

.avue-crud .el-tag {
    display: none !important;
}

.avue-crud__menu {
    display: none !important;
}

.active {
    background: colors['primary'];
}
